%script{src: '/javascripts/rtc/client_signaling.js'}
.container
  .row
    #video-grid
      .col-xs-12.col-md-12
        %video#remoteVideo{ "autoplay" => "",}
      .col-md-2.col-xs-2
        %video#localVideo{  "autoplay" => "", "muted" => "" }
  .row
    =# %textarea.form-control{ rows: 7 }
    .panel.panel-primary
      .panel-heading
        Chat
      .panel-body#js-chat-body
    %br
    .input-group
      %input.form-control#js-input-im{ type: 'text', placeholder: 'Send a Message'}
      %span.input-group-btn
        %button.btn.btn-primary#js-send-button-im{ type: "button"}
          Send
  %button.btn.btn-error#js-hangup{ type: "button"}
    Hang Up
:javascript
  var user_name = prompt("Your user name?");

  var $sendButton = $("#js-send-button-im");
  var $inputIM    = $("#js-input-im");
  var $chatBody   = $("#js-chat-body");

  $sendButton.on('click', sendIM);
  $inputIM.on('keypress', checkEnterKey);

  function sendIM() {
    var content = $inputIM.val();
    $inputIM.val("");
    socket.emit('message',{message: {content: content, user: user_name}, type: 'im', room: room});
  }

  function checkEnterKey(event) {
    if ( event.keyCode == 13 ) {
      $sendButton.click();
    }
  }

  function appendNewIM(user, message) {
    $chatBody.prepend(mediaObjectIM(user, message));
  }

  function mediaObjectIM(user, message) {
    var leftRight = user === user_name ? 'right' : 'left'
    return "  <div class='media'>"+
           "    <a class='pull-"+ leftRight +"' href='#'>"+
           "      <img class='media-object' src='http://placehold.it/45x45'>"+
           "    </a>"+
           "    <div class='media-body', style='text-align: "+ leftRight +"'>"+
           "      <h4 class='media-heading'>"+ user +"</h4>"+
           "      "+ message +""+
           "    </div>"+
           "  </div>"
  }
  ///////////////////////////////////////////////////////////////////////////

  var pc = null;
  var localStream;
  var isStarted;
  var isInitiator;
  var isChannelReady;
  var pc_config = 
  {
    'iceServers': 
    [
      {
        'url': 'stun:stun.l.google.com:19302'
      },
      {
        'url': 'turn:192.158.29.39:3478?transport=udp',
        'credential': 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
        'username': '28224511:1379330808'
      },
      {
        'url': 'turn:192.158.29.39:3478?transport=tcp',
        'credential': 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
        'username': '28224511:1379330808'
      }
    ]
  }

  if (room !== "") {
    console.log('Joining room ' + room);
    socket.emit('create or join', room);
  }

  var localVideo  = document.querySelector('#localVideo');
  var remoteVideo = document.querySelector('#remoteVideo');

  var constraints = 
    {
      video: true,
      audio: true
    };


  // Logs getUserMedia KO
  function gotError(error){
    console.alert('Problems with GetUserMedia', error);
  }

  // Fetch the user Stream (Video and Audio), getUserMedia OK
  function gotStream(stream){
    localStream = stream;
    attachMediaStream(localVideo, stream);
    socket.emit('message', {message: 'gotStream', type: 'gotStream', room: room});
    if (isInitiator){
      maybeStart();
    }
  }

  // Get User Media
  getUserMedia(constraints, gotStream, gotError);

  // Stop the PeerConnection when the you leave the window
  function stop() {
    pc.close();
    pc = null;
    attachMediaStream(remoteVideo, null);
  }

  $("#js-hangup").on("click", function () {
    stop();
    socket.emit('message', {type: 'by', room: room});
  });

  window.onbeforeunload = function() {
    stop();
    socket.emit('message', {type: 'by', room: room});
  }

  // Try to start, initiates the RTCPeerConnection
  function maybeStart() {
    if (isChannelReady && !isStarted && typeof localStream != 'undefined'){
      pc                = new RTCPeerConnection(pc_config);
      pc.onicecandidate = handleIceCandidate;
      pc.onaddstream    = handleOnAddRemoteStream;
      pc.onremovestream = handleOnRemoveStream;
      pc.addStream(localStream);
      isStarted         = true;
      if (isInitiator) {
        startCall();
      }
    }
  }

  // When recieving a ICE candidate sends it to the app, Trickle ICE. Without checking the gathering status if it's COMPLETE
  function handleIceCandidate(event) {
    console.log('ice', event);
    if (event.candidate) {
      socket.emit('message', {room: room, type: 'candidate', message: event.candidate});
    }
  }

  function handleOnAddRemoteStream(event){
    attachMediaStream(remoteVideo, event.stream);
  }

  function handleOnRemoveStream(event){
    console.log('Remote stream removed. Event: ', event);
  }

  function startCall(){
    console.log("Do Call");
    pc.createOffer(setLocalAndSendMessageOffer, handleCreateOfferError);
  }

  function startAnswer(){
    console.log("Do Call");
    pc.createAnswer(setLocalAndSendMessageAnswer, handleCreateAnswerError);
  }

  function handleCreateOfferError(event) {
    console.log("Error when Creating Offer", event);
  }

  function handleCreateAnswerError(event) {
    console.log("Error when Creating Answer", event);
  }

  function setLocalAndSendMessageOffer(offer) {
    // offer.sdp = preferOpus(offer.sdp);
    pc.setLocalDescription(offer); 
    socket.emit('message', {room: room, type: 'offer', message: offer})
  }
  
  function setLocalAndSendMessageAnswer(answer) {
    // answer.sdp = preferOpus(answer.sdp);
    pc.setLocalDescription(answer); 
    socket.emit('message', {room: room, type: 'answer', message: answer})
  }

